#version 330 core
 out vec4 fragColor;
 in vec2 fragCoord;

uniform float time;
uniform float frequencyToSend;
uniform float[1022] magVecToSend;

vec3 objcol;


float sdEllipsoid( vec3 p, vec3 r )
{
  float k0 = length(p/r);
  float k1 = length(p/(r*r));
  return k0*(k0-1.0)/k1;
}

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

float sdCylinder( vec3 p, vec3 c )
{
  return length(p.zy-c.xz)-c.z;
}

float opElongate(vec3 p, vec3 h )
{
    vec3 q = p - clamp( p, -h, h );
    return length( q );
}


float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0));
}
float smin(float a, float b, float k) {
  float res = exp(-k * a) + exp(-k * b);
  return -log(res) / k;
}
 mat2 rot(float a){
    float s = sin(a), c = cos(a);
    return mat2(c, s, -s, c);
}

float box(vec3 p, vec3 l)
{
    vec3 c=abs(p)-l;
    return length(max(vec3(0.),c))+min(0.,max(c.x,max(c.y,c.z)));
}

float posToMag(float x){

return magVecToSend[int(abs(mod((x * 45), 1022)))];
}

float dist(vec3 p)
{
    float freq2 = frequencyToSend;
    p.xz *= rot(sin(time) / 3);

    //p.xz *= rot(time);
    vec3 pos = p;
    //vec3 deform = vec3(p.x *sin(time),0,0);

//    vec3 c = vec3(6,0,0);
//    vec3 q = p-c*clamp(round(p/c),0,80);
//    vec3 q2 = p-c*clamp(round(p/c),-45,0);
    float d;
    //d = sdBox(p, vec3(1000, abs(posToMag(p.x )* .00005),5));

    //float d = sdBox(p, vec3(50 ,abs(posToMag(p.x)* .000005),1));
    //d = sdSphere(p , ( abs(p.x / 20) / (p.y / 2) * posToMag(p.x / 3) * .0000005)) -(p.x * 1.05 );

    //d = sdSphere(p , ( abs(p.y / 5 * p.x) *posToMag(p.x / 3) * .0000005)) -(p.x * 1.00005 );


    //d = sdBox(p, vec3(10000, posToMag(p.x / 5)* .000005,1));
    //d = sdCylinder(p , vec3(0,0,posToMag(p.x / 3) * .000005));
    //d = opElongate(p , vec3(1000,posToMag(p.x / 3) * .000005,1));
    d = sdSphere(p , (posToMag(p.x / 3) * .00000080)) -(p.x);

    //float d2 = sdBox(q2, vec3(.2, abs(1+ posToMag(-p.x / 4)* .000008),.2))-.2;
    //float d2 = sdBox(q, vec3(.1, abs(.2+ posToMag(p.x)* .000008 ),.1))-.15;

    //float d = sdEllipsoid(p, vec3(freq2 / 10000,freq2 / 10000,freq2 / 10000));
    //d = min(d,sdBox(pos + vec3(0,0,0), vec3(2,freq2/ 1000,2)));

    //float colorChange = abs(posToMag(p.x)* .008) /2500;

    float colorChange = posToMag(p.x / 3) * .00000080;
    float colorChangeLowAmp = posToMag(p.x / 3) * .000010;

    objcol = vec3(colorChange,       .8 - colorChange,              .8 - colorChangeLowAmp);

    ///if(freq2 > 8000)
    //objcol += abs(pos /25);

    return d;
	//return smin(d, d2,1.);
}

  vec3 normal(vec3 p) {
    vec2 d = vec2(0., .01);
    return normalize(vec3(dist(p+d.yxx), dist(p+d.xyx), dist(p+d.xxy))-dist(p));
}

vec3 March(vec3 rayOri, vec3 rayDir){
    vec3 p = rayOri, col = vec3(0.);
	float d = 0.;

	for(int i = 0; i < 100; i++) {

        d = dist(p);
        p += d * rayDir;
        if(d < .5){
            vec3 n = normal(p);
            vec3 l = normalize(vec3(1.5,2.,0.));
            float light = max(dot(n,l),0.);
            col +=  mix(objcol / 100, vec3(.01,.01,.01), light);
             if(frequencyToSend > 10000){
                col *= 1.01;
                }
        }
		if (d<0.01){
            vec3 n = normal(p);
            vec3 l = normalize(vec3(1.5,2.,0.));
            float light = max(dot(n,l),0.);
            col =  mix(objcol, vec3(1,1,1), light);
		    break;
        }
	}
    return col;
}



void main()
{
    vec2 uv = (vec2(gl_FragCoord.x, gl_FragCoord.y) / vec2(1920, 1920)) -.5;

	vec3 rayOri = vec3(25,13.,-60);
	vec3 rayDir = normalize(vec3(uv, 1.));

	vec3 col = March(rayOri, rayDir);
    fragColor = vec4(col, 1.);
}