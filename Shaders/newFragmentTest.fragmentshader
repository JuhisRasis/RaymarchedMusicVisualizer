#version 330

in vec2 vertUV;

out vec3 color;
uniform sampler2D texA;
uniform sampler2D texB;
uniform sampler2D texM;



out vec3 fragmentColor;
in vec2 fragCoord;

in vec2 v_vTexcoord;
out vec2 v_vPosition;

uniform float time;
uniform float sinTime;

vec3 palette(float d){
	return mix(vec3(0.2,0.7,0.9),vec3(1.,0.,1.),d);
}

vec2 rotate(vec2 p,float a){
	float c = cos(a);
    float s = sin(a);
    return p*mat2(c,s,-s,c);
}
float map(vec3 p){
    for( int i = 0; i<8; ++i){
        float t = time*1;
        p.xz =rotate(p.xz,t);
        p.xy =rotate(p.xy,t*1.89);
        p.xz = abs(p.xz);
        p.xz-=.5;
	}
	return dot(sign(p),p)/5.;
}
vec4 rm (vec3 ro, vec3 rd){
    float t = 0.;
    vec3 col = vec3(0.);
    float d;
    for(float i =0.; i<64.; i++){
		vec3 p = ro + rd*t;
        d = map(p)*.5;
        if(d<0.02){
            break;
        }
        if(d>100.){
        	break;
        }
        //col+=vec3(0.6,0.8,0.8)/(400.*(d));
        col+=palette(length(p)*.1)/(400.*(d));
        t+=d;
    }
    return vec4(col,1./(d*100.));
}



void main()
{
    vec2 p = gl_FragCoord.xy / vec2(s, 768);

    vec2 uv = (fragCoord-(vec2(1024, 768)))/ 768;
	vec3 ro = vec3(0.,0.,-50.);

    vec3 cf = normalize(-ro);
    vec3 cs = normalize(cross(cf,vec3(0.,1.,0.)));
    vec3 cu = normalize(cross(cf,cs));

    vec3 uuv = ro+cf*3. + uv.x*cs + uv.y*cu;
    vec3 rd = normalize(uuv-ro);

    vec3 col = vec3(1.0) - sinTime*vec3(0.1,0.4,0.7);


    vec3 colorNew = col;
    colorNew *= length(p- vec2(0.5,0.5));

    vec3 cA = texture(texA, vertUV).rgb;
	vec3 cB = texture(texB, vertUV).rgb;
	float m = texture(texM, vertUV).r;

	vec3 c = mix(cA, cB, m);
    vec3 colo = mix(c, colorNew, m);
    fragmentColor = c + (colorNew / sinTime);
}




